// React - 03

- Script commands for building and testing:
  - "start": "parcel index.html"
  - "build": "parcel build index.html"

- React Elements:
  - createElement, createRoot, render 

- React Core usage can become clumsy.

- JSX (JavaScript syntax for creating React Elements):
  - Easier than pure JavaScript
  - Allows merging HTML and JS
  - Not HTML inside JS; it's HTML-like syntax
  - JSX is only a syntax; ReactElement is an object

- JS engine understands all versions of ECMAScript.

- Example of JSX:
  - `const jsxHeading = <h1>Hello JS</h1>`
  - JSX gets transpiled by Parcel before reaching the JS engine.

- Parcel transpiles JSX using Babel:
  - Babel is a JS compiler.
  - Converts JSX into React Code.

- JSX transpilation process:
  - JSX → Babel transpiles it into React.createElement → React element (JS Object) → HTML Element (rendered as HTML element)

- JSX attribute naming convention: "camelCase".

- Multiple line JSX: Use parentheses.

- React Components:
  - Class-Based Components (old way using JS classes)
  - Functional Components (use JS functions to create components)

- Example of a Functional Component:
  - `const HeadingComponent = () => <h1 className="head">NamReact</h1>`

- Rendering HeadingComponent:
  - Incorrect: `root.render(HeadingComponent)` because it's a Functional Component.
  - Correct: `root.render(<HeadingComponent />)`

- Component composition:
  - Combine smaller, self-contained components for complex and feature-rich UIs.
  - Promotes reusability, modularity, and maintainability.

- JSX allows injecting JS code:
  - Use curly braces {}.

- ReactElement can be used inside React Element or Functional component; mix and match as needed.

- JSX takes care of malicious code:
  - Sanitizes data and handles cross-site attacks.

- Example of JSX usage:
  - `<Title></Title>` same as `<Title/>` or `{Title()}`

- Everything is JS at the end of the day.

- Readable code:
  - JSX makes it faster and more readable.

- Appreciate Babel and other important tools.
...................................................................................................................................................................................................

                                                         My Notes Version 
// React - 03

script - start build test
like this
"start":"parcel index.html",
"build":"parcel build index.html",
React Elements - createElement, createRoot, render 
React Core usage became work very clumsy.
//JSX - Javascript syntax which easier to create React Elements.
We can write React without JSX also but makes developer life easy.
JSX is a convention where we merge this HTML and JS together.
JSX is not HTML inside JS but it is actually a HTML like syntax.
JSX is only a syntax, ReactElement is an object
JS engine understand all the version of ECMASCRIPT 
const jsxHeading =<h1>Hello JS</h1> THis is not understand by JS engine so before going to 
the JS engine it gets transpiled means converted to code that browser can understand.
Therefore the transpiling done by Parcel. Parcel has many package and it gave the responsibility of transpilation to the package which is known as 'Babbel'.
Babel is JS compiler. Babel jobs to convert the JSX into React Code.
Babel is great !!
// JSX --> Babel transpiles it into React.createElement --> React element(JS Object) --> HTML Element(render as HTML element) 
If you have to give attributes to the JSX you have to use "camelCase".
Multiple line JSX
// React Components
Class-Based Components - (old way coding style, use JS classes)
and Functional Components (uses JS function to create components) 
Functional Component - normal JS function which return some piece of JSX element
const HeadingComponent = ()=> {
return <h1 className="head">NamReact</h1>}
const HeadingComponent = ()=>(
<h1 className="head">NamReact</h1>)
Both code same !! Different People Different Style !!
How to render HeadingComponent ? 
root.render(HeadingComponent) Incorrect !! Bcoz its not a React Element! Its Functional Component. The right way is :
root.render(<HeadingComponent />);
--> Component composition is the practice of combining smaller, self-contained components to create more complex and feature-rich user interfaces. This approach promotes re-usability, modularity, and maintainability.
--> You can inject any JS inside your JSX inside the {} curly parenthesis.
--> You need to put the things after its initialisation.
--> We can use ReactElement inside React Element, use React Element inside Functional component,you can mix match anything inside anything. 
 JSX takes care of malacious code. It will sanitizing the data and will do cross site attack for you. This is how powerful JSX is.
--> <Title></Title> same as <Title/>also {Title()}
Everything is JS at the end of day :)
If your code is readable then not only the React can do it.JSX can make it all faster readable also.
Appreciate BABEL and other important things also.
