// React - 03

- Script commands for building and testing:
  - "start": "parcel index.html"
  - "build": "parcel build index.html"

- React Elements:
  - createElement, createRoot, render 

- React Core usage can become clumsy.

- JSX (JavaScript syntax for creating React Elements):
  - Easier than pure JavaScript
  - Allows merging HTML and JS
  - Not HTML inside JS; it's HTML-like syntax
  - JSX is only a syntax; ReactElement is an object

- JS engine understands all versions of ECMAScript.

- Example of JSX:
  - `const jsxHeading = <h1>Hello JS</h1>`
  - JSX gets transpiled by Parcel before reaching the JS engine.

- Parcel transpiles JSX using Babel:
  - Babel is a JS compiler.
  - Converts JSX into React Code.

- JSX transpilation process:
  - JSX → Babel transpiles it into React.createElement → React element (JS Object) → HTML Element (rendered as HTML element)

- JSX attribute naming convention: "camelCase".

- Multiple line JSX: Use parentheses.

- React Components:
  - Class-Based Components (old way using JS classes)
  - Functional Components (use JS functions to create components)

- Example of a Functional Component:
  - `const HeadingComponent = () => <h1 className="head">NamReact</h1>`

- Rendering HeadingComponent:
  - Incorrect: `root.render(HeadingComponent)` because it's a Functional Component.
  - Correct: `root.render(<HeadingComponent />)`

- Component composition:
  - Combine smaller, self-contained components for complex and feature-rich UIs.
  - Promotes reusability, modularity, and maintainability.

- JSX allows injecting JS code:
  - Use curly braces {}.

- ReactElement can be used inside React Element or Functional component; mix and match as needed.

- JSX takes care of malicious code:
  - Sanitizes data and handles cross-site attacks.

- Example of JSX usage:
  - `<Title></Title>` same as `<Title/>` or `{Title()}`

- Everything is JS at the end of the day.

- Readable code:
  - JSX makes it faster and more readable.

- Appreciate Babel and other important tools.
