import React from "react";
import './App.css';
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from 'yup';
import TextError from "./TextError";

const App = () => {
  const initialValues = {
    name: "",
    email: "",
    channel: "",
    comments: "",
    address: "",
    social: {
        facebook: '',
        twitter: ''
    }
  };

  const onSubmit = values => {
    alert(JSON.stringify(values, null, 2));
    console.log("Form values", values);
  };

  const validationSchema = Yup.object({
    name: Yup.string().required("Required"),
    email: Yup.string().email('Invalid Email Format').required('Required'),
    channel: Yup.string().required('Required'),
    address: Yup.string().required('Required')
  });

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
      <Form>
        <div className="form-control">
          <label htmlFor="name">Name:</label>
          <Field
            type="text"
            id="name"
            name="name"
          />
          <ErrorMessage name="name" component={TextError} className="error"/>
        </div>

        <div className="form-control">
          <label htmlFor="email">Email:</label>
          <Field
            type="email"
            id="email"
            name="email"
          />
          <ErrorMessage name="email">
          {(errorMsg) => <div className="error">{errorMsg}</div>}
          </ErrorMessage>
        </div>

        <div className="form-control">
          <label htmlFor="channel">Channel:</label>
          <Field
            type="text"
            id="channel"
            name="channel"
          />
          <ErrorMessage name="channel" component={TextError} className="error"/>
        </div>
      
        <div className="form-control">
          <label htmlFor="comments">Comments:</label>
          <Field
            as="textarea"
            id="comments"
            name="comments"
          />
          <ErrorMessage name="comments" component={TextError} className="error"/>
        </div>

        <div className="form-control">
          <label htmlFor="address">Address:</label>
          <Field name="address">
            {({ field, meta }) => (
              <div>
                <input id="address" type="text" {...field} />
                {meta.touched && meta.error ? <div className="error">{meta.error}</div> : null}
              </div>
            )}
          </Field>
          <ErrorMessage name="address" component={TextError} className="error"/>
        </div>

        <div className="form-control">
          <label htmlFor="facebook">Facebook profile:</label>
          <Field
            type="text"
            id="facebook"
            name="social.facebook"
          />
          <ErrorMessage name="social.facebook" component={TextError} className="error"/>
        </div>

        <div className="form-control">
          <label htmlFor="twitter">Twitter profile:</label>
          <Field
            type="text"
            id="twitter"
            name="social.twitter"
          />
          <ErrorMessage name="social.twitter" component={TextError} className="error"/>
        </div>

        <button type="submit">Submit</button>
      </Form>
    </Formik>
  );
};

export default App;
