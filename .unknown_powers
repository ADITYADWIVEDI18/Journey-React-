#Topchi Coders Optimization
Modularity
Lazy Loading

#Authentication
Firebase


#Interview 
Different User Components like :


#Powers
Netflix GPT 
Features :
1. create-react-app / vite / parcel ...
2. Configure Tailwind CSS in our project.
3. #Featueres :
*Browse Page(after authentication)
  Header
  Main Movie
  Tailer in background
  Title Description and Play Button  
  Movie Suggestioon
  Movies Lists

*Login/Signup 
  Sign In / Signup Form - then redirect to Browse page
*Netflix Gpt
  Search Bar
  Movie Suggestions


Power of REACT Food App Child Superhero :
Part-1 (Knowing the Setup)
Dev Build
Local Server
HMR = Hot Module Replacement
File Watching Algorithm - written in C++
Caching - Faster Builds
Image Optimization
Minification
Bundling
Compress
Consistent Hashing
Code Splitting
Differential Bundling - support older browsers
Diagnostic
Error Handling
HTTPs
Tree Shaking - remove unused code
Different dev and prod bundles

Part-2
*Header
Logo
Nav Items
*Body
Search
RestaurantContainer
RestaurantCard
*Footer
Copyright
Links
Address
Contact 

*Two types of Export/Import

Default Export/Import
export default Component; import Component from "path";

Named Export/Import
export const Component; import {Component} from "path";

React Hooks
(Normal JS utility functions)

useState() - Superpowerful State Variables in react
useEffect()

*2 types Routing in web apps:
Client Side Routing
Server Side Routing

*Redux Toolkit
Install @reduxjs/toolkit and react-redux
Build our store
Connect our store to our app
Slice (cartSlice)
dispatch(action)
Selector

*Testing
Unit Testing
Integration Testing
End to End Testing - e2e testing

*Setting up Testing in our app
Install React Testing Library
Installed jest
Installed Babel dependencies
Configure Babel
Configure Parcel Config file to disable default babel transpilation
Jest - npx jest --init
Install jsdom library
Install @babel/preset-react - to make JSX work in test cases
Include @babel/preset-react inside my babel config
npm i -D @testing-library/jest-dom



& Powers of REACT NetflixGPT Superhero : 

Create React App
Configured TailwindCSS
Header
Routing of App
Login Form
Sign up Form
Form Validation
useRef Hook
Firebase Setup
Deploying our app to production
Create SignUp User Account
Implement Sign In user Api
Created Redux Store with userSlice
Implemented Sign out
Update Profile
BugFix: Sign up user displayName and profile picture update
BugFix: if the user is not logged in Redirect /browse to Login Page and vice-versa
Unsubscibed to the onAuthStateChanged callback
Add hardcoded values to the constants file
Regiter TMDB API & create an app & get access token
Get Data from TMDB now playing movies list API
Custom Hook for Now Playing Movies
Create movieSlice
Update Store with movies Data
Planning for MainContauiner & secondary container
Fetch Data for Trailer Video
Update Store with Trailer Video Data
Embedded the Yotube video and make it autoplay and mute
Tailwind Classes to make Main Container look awesome
Build Secondary Component
Build Movie List
build Movie Card
TMDB Image CDN URL
Made the Browsre page amazing with Tailwind CSS
usePopularMovies Custom hook
GPT Search Page
GPT Search Bar
(BONUS) Multi-language Feature in our App)
Get Open AI Api Key
Gpt Search API Call
fetched gptMoviesSuggestions from TMDB
created gptSlice added data
Resused Movie List component to make movie suggestion container
Memoization
Added .env file
Adding .env file to gitignore
Made our Site Responsive
...................................................................................................................................................................................................................
My Notes and Hierarchy :
Folder Structure also plan about the components used in the product. (App Layout)
JSX and {}
Mapping List of data's.
Hooks are always used inside the components.
Shimmer UI 
Login-Logout Button 
Search text 
Fetching API
CORS Extension and about CORS
useState
useEffect 
React Routing 
createBrowserRouter
RouterProvider
Outlet
Class Component-(this.state, this.setState, constructor, Lifecycle of React,Context Api)
Context Api in functional and class component.
Redux in functional and class component.
Controlled Component and Uncontrolled Component
Lifting the state

#React Hook :
1.useState
2.useEffect
3.useContext(Context API)
4.useReducer
5.useSelector(Redux)
6.useMemo
7.useRef(Form)
8.Custom Hooks*
9.useNavigate(React Router DOM)
10.useMemo
11.useCallback


